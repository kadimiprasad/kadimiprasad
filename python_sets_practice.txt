1:For the below binary number , count the Occurrence of sequence '101'

1010101010011110


import re
s="10101010100111101"
k=re.findall("101",s)
p=len(k)
print p


2: For the below matrix , calculate both the diagonal and print the value.(Hint: consider each row as a list object)

3 8 7
8 7 9
1 6 0


li=[[3,8,7],[8,7,9],[1,6,0]]
l=len(li[0])
print sum([li[i][i] for i in range(l)])
print sum([li[l-1-i][i]for i in range(l-1,-1,-1)])



 

3 :Rotate the above matrix by 90 degree anticlockwise

hint :convert row to column and column to row



list1 = [[3, 8, 7], [8, 7, 9], [1, 6, 0]]

print [[list1[j][i] for j in range(len(list1))]
       for i in range(len(list1[0])-1,-1,-1)]


4: The string abcabcabc........ goes till 1111 . print the number of Occurrence of 'ca'


s="abc"
s1=s*370+"a"
s2=s1.count("ca")
print s2




5: Convert the string as below.

input : abcDEwQ

output: ABCdeWq

 
def swap(s):
    s1=""
    for i in s:
        if i.isupper():
            s1+=i.lower()
        else:
            s1+=i.upper()
    print s1
s=raw_input("enter the string")
swap(s)



6: Find the ordered longest alphabetical sequence.

abccdefabcdefae

 

s="abcd abcdef pqrstuvw "
k=s[:1]
p=s[:1]
for i in range(len(s)-1):
    if ord(s[i])==ord(s[i+1])-1:
        k=k+s[i+1]
        if len(k)>len(p):
            p=k
    else:
        k=s[i+1]
print("Longest:" + p)



7:Find the sum of multiples of 3 and 5 between 1 to 1000


def getsum():
    sum=0
    for i in range(1,1000):
        if(i%3==0) or (i%5==0):
            sum=sum+i
    print sum

getsum()



8: Display the phone number as below and also print the last 4 digit in ascending order

input : 9993452133

output :xxx-xxx-xxxx


phone="9676923643"
s1=""
k=len(phone)/3
j=0
for i in range(k-1):
    s1=s1+phone[j:k]+"-"
    j=k
    k=k+3
s2=sorted(phone[-4:])
for i in s2:
    s1=s1+''.join(i)
print s1


9: "There are 26 alphabets in English out of which 5 are vowels and 21 are consonants"

Count the sum of numbers in the above statement using regular expression

 
import re
sum=0
s="There are 26 alphabets in English out of which 5 are vowels and 21 are consonants"
k=re.findall("\d+",s)
for i in k:
    sum=sum+int(i)
print sum


10.anagram : sample inputs : tear, rate ; Find if these words are anagram or not. Program should accept two inputs from user.

 
class anagram:
    def Checkanagram(self, word1, word2):
        if len(word1) == len(word2):
            if sorted(word1) == sorted(word2):
                return True
        return False
Obj = anagram()
print Obj.Checkanagram("rate","tear")






11;With a given integral number n, change the program to generate a dictionary that contains (i, cube of i) such that is an integral number between 1 and n (both included).

and then the program should print the dictionary.

Suppose the following input is supplied to the program:

7

Then, the output should be:

{1: 1, 2: 8, 3: 27, 4: 64, 5: 125, 6: 216, 7: 373}

Take the input from the user via console.

 
n=input("enter the range")
dict={}
for i in range(1,n):
    dict[i]=i**3
print dict




12: find if the below numbers are Armstrong number

a: 153

b:1634

c: 876


num=1634
temp=num
rem=0
while temp>0:
    dig= temp%10
    rem=rem+dig**3
    temp = temp // 10
if rem==num:
    print "armstrong"
else:
    print "not armstrong"


